- name: Provisionning node-box
  hosts: nodebox
  tasks:
    # -----------------------------------------
    # SYSTEM
    # -----------------------------------------
    - name: Update apt packages and upgrade system
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
      become: true

    - name: Install required packages # noqa: package-latest
      ansible.builtin.package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - jq
          - nfs-common
          - htop
          - wget
          - python3
          - python3-pip
        state: latest
      become: true

    - name: Disable swap
      ansible.builtin.command: swapoff -a
      register: swap_disabled
      changed_when: swap_disabled.rc == 0
      become: true

    - name: Disable swap in /etc/sysctl.conf
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^vm.swappiness = 0'
        line: 'vm.swappiness = 0'
      become: true

    - name: Add modprobe modules
      ansible.builtin.shell: |
        cat <<EOF > /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
      register: modprobe_mobules
      changed_when: modprobe_mobules.rc == 0
      args:
        executable: /bin/bash
      become: true

    - name: Enable modprobe modules
      ansible.builtin.shell: |
        modprobe overlay
        modprobe br_netfilter
      register: modprobe
      changed_when: modprobe.rc == 0
      become: true

    - name: Configure sysctl for bridged network
      ansible.builtin.shell: |
        cat <<EOF > /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
      register: sysctl_k8s
      changed_when: sysctl_k8s.rc == 0
      args:
        executable: /bin/bash
      become: true

    - name: Apply change to sysctl
      ansible.builtin.shell: |
        sysctl --system
      register: sysctl
      changed_when: sysctl.rc == 0
      become: true

    # -----------------------------------------
    # PYTHON
    # -----------------------------------------
    - name: Upgrade pip
      ansible.builtin.shell: |
        pip3 install --upgrade pip
      register: pip_upgrade
      changed_when: pip_upgrade.rc == 0

    - name: Install pip modules # noqa: package-latest
      ansible.builtin.pip:
        name: kubernetes
        state: latest

    # -----------------------------------------
    # CONTAINER
    # -----------------------------------------
    - name: Add docker APT repo # noqa : yaml
      ansible.builtin.shell: |
        set -o pipefail
        wget -qO- https://download.docker.com/linux/debian/gpg \
          | gpg --dearmor \
          | tee /etc/apt/trusted.gpg.d/docker.gpg

        chmod 644 /etc/apt/trusted.gpg.d/docker.gpg
        chown root:root /etc/apt/trusted.gpg.d/docker.gpg

        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
          | tee /etc/apt/sources.list.d/docker.list
      register: apt_repo_docker
      changed_when: apt_repo_docker.rc != 0
      args:
        executable: /bin/bash
      become: true

    - name: Add kubernetes APT repo
      ansible.builtin.shell: |
        set -o pipefail

        wget -qO- https://packages.cloud.google.com/apt/doc/apt-key.gpg \
          | gpg --dearmor \
          | tee /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg

        chmod 644 /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg
        chown root:root /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg

        echo "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" \
          | tee /etc/apt/sources.list.d/kubernetes.list
      register: apt_repo_k8s
      changed_when: apt_repo_k8s.rc != 0
      args:
        executable: /bin/bash
      become: true

    - name: Update package repositories
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install packages # noqa : package-latest
      ansible.builtin.package:
        name:
          - containerd.io
          - kubelet
          - kubeadm
          - kubectl
        state: latest
      become: true

    - name: Generate containerd default configuration
      ansible.builtin.shell: |
        set -o pipefail
        containerd config default | tee /etc/containerd/config.toml
      register: containerd_default_config
      changed_when: containerd_default_config.rc == 0
      args:
        executable: /bin/bash
      become: true

    - name: Enable containerd systemd cgroup # noqa: command-instead-of-module
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: '^(\s+SystemdCgroup =)\s(false)$'
        replace: '\1 true'
      become: true

    - name: Restart services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      become: true
      with_list:
        - containerd
        - kubelet

    - name: Prevent services from changes
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      become: true
      with_list:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable kubectl autocompletion (system scope)
      ansible.builtin.shell: |
        set -o pipefail
        kubectl completion bash | tee /usr/share/bash-completion/completions/kubectl > /dev/null
      register: kubectl_completion
      changed_when: kubectl_completion.rc == 0
      args:
        executable: /bin/bash
      become: true

    - name: Pull cluster control images
      ansible.builtin.shell: |
        kubeadm config images pull --cri-socket unix:///var/run/containerd/containerd.sock
      register: control_images
      changed_when: control_images.rc == 0
      become: true

    # -----------------------------------------
    # HELM
    # -----------------------------------------
    - name: Get Helm install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: "0700"

    - name: Install Helm
      ansible.builtin.shell: |
        bash /tmp/get_helm.sh
      register: helm_install
      changed_when: helm_install.rc == 0
      args:
        executable: /bin/bash

    - name: Remove Helm install script
      ansible.builtin.file:
        path: /tmp/get_helm.sh
        state: absent

    # -----------------------------------------
    # CLEANUP
    # -----------------------------------------
    - name: Remove node-box hosts entry
      ansible.builtin.lineinfile:
        path: /etc/hosts
        state: absent
        regexp: '^127.0.1.1 node-box node-box'
      become: true
